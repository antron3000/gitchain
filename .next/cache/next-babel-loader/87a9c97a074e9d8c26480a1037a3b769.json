{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport projhub from \"../../ethereum/projhub\";\nimport web3 from \"../../ethereum/web3\";\nimport ipfs from \"../../ethereum/ipfs\";\nimport { Container, Form, Input, Button } from \"semantic-ui-react\";\nimport { Router, Link } from \"../../routes\";\n\nclass NewProject extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      projName: \"\",\n      description: \"\",\n      file1: \"\",\n      fileName: \"\",\n      fileBuffer: [],\n      fileNames: [],\n      fileCount: \"\",\n      fileInputs: [],\n      uid: 0,\n      username: \"\",\n      account: \"\",\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      console.log(this.state.fileBuffer);\n      console.log(this.state.fileNames);\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const uid = this.state.uid;\n        const projName = this.state.projName;\n        const acc = this.state.account;\n        const fileNames = this.state.fileNames;\n        const description = this.state.description;\n        const date = new Date();\n        date.setHours(date.getHours() + 5);\n        date.setMinutes(date.getMinutes() + 30);\n        const timestamp = date.toUTCString().replace(\"GMT\", \"IST\");\n        const fileBuffer = this.state.fileBuffer;\n        let filesHash = [];\n\n        for (var i = 0; i < fileBuffer.length; i++) {\n          const ipfsHash = await ipfs.add(fileBuffer[i]);\n          filesHash.push(ipfsHash[0].hash);\n        }\n\n        console.log(acc, filesHash);\n        await projhub.methods.createProject(uid, projName, timestamp, description, filesHash, fileNames).send({\n          from: acc\n        });\n        Router.pushRoute(\"/\");\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"captureFile\", event => {\n      // event.stopPropogation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      this.setState({\n        file1: URL.createObjectURL(file)\n      }); // console.log(file);\n\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader, file.name);\n    });\n\n    _defineProperty(this, \"convertToBuffer\", async (reader, fname) => {\n      const buffer = await Buffer.from(reader.result);\n      let fileBuffer = this.state.fileBuffer;\n      let fileNames = this.state.fileNames;\n      fileBuffer.push(buffer);\n      fileNames.push(fname);\n      this.setState({\n        fileBuffer: fileBuffer,\n        fileNames: fileNames\n      });\n    });\n\n    _defineProperty(this, \"renderFileInputs\", event => {\n      const fileCount = event.target.value;\n      let fileInputs = [];\n\n      for (var i = 0; i < fileCount; i++) {\n        let row = __jsx(Form.Field, {\n          key: i\n        }, __jsx(\"label\", {\n          style: {\n            fontSize: \"15px\"\n          }\n        }, \"Upload File \", i + 1), __jsx(Form.Input, {\n          style: {\n            fontSize: \"15px\"\n          },\n          type: \"file\",\n          onChange: event => this.captureFile(event)\n        }));\n\n        fileInputs.push(row);\n      }\n\n      this.setState({\n        fileCount: fileCount,\n        fileInputs: fileInputs\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const account = await web3.eth.getAccounts();\n    const userDetails = await projhub.methods.getUserDetails(account[0]).call();\n    this.setState({\n      account: account[0],\n      uid: userDetails[0],\n      username: userDetails[2]\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Container, {\n      style: {\n        padding: \"10px\"\n      }\n    }, __jsx(\"h3\", null, \"Create Project\"), __jsx(\"hr\", null), __jsx(\"br\", null), __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Field, null, __jsx(\"label\", {\n      style: {\n        fontSize: \"15px\"\n      }\n    }, \"Project Name\"), __jsx(Form.Input, {\n      fluid: true,\n      style: {\n        fontSize: \"15px\"\n      },\n      placeholder: \"Project Name\",\n      value: this.state.projName,\n      onChange: event => this.setState({\n        projName: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", {\n      style: {\n        fontSize: \"15px\"\n      }\n    }, \"Project Description\"), __jsx(Form.TextArea, {\n      rows: \"8\",\n      style: {\n        fontSize: \"15px\"\n      },\n      placeholder: \"Project Description\",\n      value: this.state.description,\n      onChange: event => this.setState({\n        description: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", {\n      style: {\n        fontSize: \"15px\"\n      }\n    }, \"No. of Files\"), __jsx(Form.Input, {\n      fluid: true,\n      style: {\n        fontSize: \"15px\"\n      },\n      placeholder: \"No. of Files\",\n      value: this.state.fileCount,\n      onChange: event => this.renderFileInputs(event)\n    })), this.state.fileInputs, __jsx(Button, {\n      loading: this.state.loading,\n      content: \"Create Project\",\n      size: \"medium\",\n      color: \"teal\",\n      fluid: true\n    })), __jsx(\"br\", null), __jsx(\"br\", null)));\n  }\n\n}\n\nexport default NewProject;\n{\n  /* <Form.Field>\n               <label style={{ fontSize: \"15px\" }}>Upload File 1</label>\n               <Form.Input\n                 style={{ fontSize: \"15px\" }}\n                 type=\"file\"\n                 onChange={event => this.captureFile(event)}\n               />\n             </Form.Field>\n             <Form.Field>\n               <label style={{ fontSize: \"15px\" }}>Upload File 2</label>\n               <Form.Input\n                 style={{ fontSize: \"15px\" }}\n                 type=\"file\"\n                 onChange={event => this.captureFile(event)}\n               />\n             </Form.Field> */\n}","map":null,"metadata":{},"sourceType":"module"}