{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/hrishib/Desktop/gitchain/pages/projects/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport projhub from \"../../ethereum/projhub\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router, Link } from \"../../routes\";\nimport { List, Container } from \"semantic-ui-react\";\n\nvar ShowProject = /*#__PURE__*/function (_Component) {\n  _inherits(ShowProject, _Component);\n\n  function ShowProject() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ShowProject);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShowProject)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      projId: 0,\n      projName: \"\",\n      projTime: \"\",\n      projFileHashes: [],\n      projDescription: \"\",\n      projFileNames: [],\n      files: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderFiles\", function _callee() {\n      var files;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              files = _this.state.projFileNames.map(function (file, index) {\n                var hash = _this.state.projFileHashes[index];\n                var projId = _this.state.projId;\n                return __jsx(List.Item, {\n                  key: index,\n                  style: {\n                    padding: \"10px\",\n                    border: \"1px solid\",\n                    borderColor: \"lightgrey\"\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 50\n                  },\n                  __self: this\n                }, __jsx(List.Content, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 58\n                  },\n                  __self: this\n                }, __jsx(List.Header, {\n                  style: {\n                    marginBottom: \"10px\",\n                    fontSize: \"18px\"\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 59\n                  },\n                  __self: this\n                }, __jsx(Link, {\n                  route: \"/projects/\".concat(projId, \"/\").concat(index),\n                  params: {\n                    projName: _this.state.projName\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 60\n                  },\n                  __self: this\n                }, __jsx(\"a\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 61\n                  },\n                  __self: this\n                }, file)))));\n              });\n\n              _this.setState({\n                files: files\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(ShowProject, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var projId, accounts, projDetails;\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              projId = this.props.projId;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 3:\n              accounts = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(projhub.methods.getProjectDetails(accounts[0], projId).call());\n\n            case 6:\n              projDetails = _context2.sent;\n              this.setState({\n                projId: projId,\n                projName: projDetails[1],\n                projTime: projDetails[2],\n                projDescription: projDetails[3],\n                projFileHashes: projDetails[4],\n                projFileNames: projDetails[5]\n              });\n              console.log(projId);\n              this.renderFiles();\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, __jsx(Container, {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, __jsx(\"h3\", {\n        style: {\n          color: \"grey\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.state.projName), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), __jsx(List, {\n        items: this.state.files,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        style: {\n          padding: \"10px\",\n          border: \"1px solid\",\n          borderColor: \"lightgrey\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, __jsx(\"h4\", {\n        style: {\n          color: \"grey\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Description\"), __jsx(\"p\", {\n        style: {\n          fontSize: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.projDescription))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return {\n        projId: props.query.id\n      };\n    }\n  }]);\n\n  return ShowProject;\n}(Component);\n\nexport default ShowProject;","map":{"version":3,"sources":["/home/hrishib/Desktop/gitchain/pages/projects/index.js"],"names":["React","Component","Layout","projhub","web3","Router","Link","List","Container","ShowProject","projId","projName","projTime","projFileHashes","projDescription","projFileNames","files","state","map","file","index","hash","padding","border","borderColor","marginBottom","fontSize","setState","props","eth","getAccounts","accounts","methods","getProjectDetails","call","projDetails","console","log","renderFiles","color","query","id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport projhub from \"../../ethereum/projhub\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router, Link } from \"../../routes\";\nimport { List, Container } from \"semantic-ui-react\";\n\nclass ShowProject extends Component {\n  state = {\n    projId: 0,\n    projName: \"\",\n    projTime: \"\",\n    projFileHashes: [],\n    projDescription: \"\",\n    projFileNames: [],\n    files: []\n  };\n\n  static getInitialProps(props) {\n    return {\n      projId: props.query.id\n    };\n  }\n\n  async componentDidMount() {\n    const projId = this.props.projId;\n    const accounts = await web3.eth.getAccounts();\n    const projDetails = await projhub.methods\n      .getProjectDetails(accounts[0], projId)\n      .call();\n\n    this.setState({\n      projId: projId,\n      projName: projDetails[1],\n      projTime: projDetails[2],\n      projDescription: projDetails[3],\n      projFileHashes: projDetails[4],\n      projFileNames: projDetails[5]\n    });\n    console.log(projId);\n\n    this.renderFiles();\n  }\n\n  renderFiles = async () => {\n    const files = this.state.projFileNames.map((file, index) => {\n      let hash = this.state.projFileHashes[index];\n      let projId = this.state.projId;\n      return (\n        <List.Item\n          key={index}\n          style={{\n            padding: \"10px\",\n            border: \"1px solid\",\n            borderColor: \"lightgrey\"\n          }}\n        >\n          <List.Content>\n            <List.Header style={{ marginBottom: \"10px\", fontSize: \"18px\" }}>\n              <Link route={`/projects/${projId}/${index}`} params={{projName: this.state.projName}}>\n                <a>{file}</a>\n              </Link>\n            </List.Header>\n          </List.Content>\n        </List.Item>\n      );\n    });\n    this.setState({ files: files });\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Container style={{padding: \"10px\"}}>\n          <h3 style={{color:\"grey\"}}>{this.state.projName}</h3>\n          <hr/>\n          <List items={this.state.files} />\n          <br/>\n          <div style={{padding:\"10px\", border:\"1px solid\", borderColor:\"lightgrey\"}}>\n            <h4 style={{color:\"grey\"}}>Description</h4>\n            <p style={{fontSize:\"15px\"}}>{this.state.projDescription}</p>\n          </div>\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nexport default ShowProject;\n"]},"metadata":{},"sourceType":"module"}