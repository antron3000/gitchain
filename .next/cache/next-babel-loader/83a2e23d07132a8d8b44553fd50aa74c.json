{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/hrishib/Desktop/gitchain/pages/users/display/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../../../components/Layout\";\nimport projhub from \"../../../ethereum/projhub\";\nimport web3 from \"../../../ethereum/web3\";\nimport ipfs from \"../../../ethereum/ipfs\";\nimport { Grid, Container, Card, Button } from \"semantic-ui-react\";\n\nvar DisplayUser = /*#__PURE__*/function (_Component) {\n  _inherits(DisplayUser, _Component);\n\n  function DisplayUser() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DisplayUser);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DisplayUser)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      userIndex: 0,\n      userName: \"\",\n      userAddress: \"\",\n      userEmail: \"\",\n      userProjCount: 0,\n      projects: [],\n      projCards: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProjcards\", function () {\n      var projCards = _this.state.projects.map(function (proj, index) {\n        return {\n          header: __jsx(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, proj[1]),\n          description: __jsx(\"p\", {\n            style: {\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, proj[3]),\n          extra: __jsx(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, proj[2])\n        };\n      });\n\n      _this.setState({\n        projCards: projCards\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DisplayUser, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userIndex, userDetails, projects, i, proj;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              userIndex = this.props.userIndex;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(projhub.methods.users(userIndex).call());\n\n            case 3:\n              userDetails = _context.sent;\n              projects = [];\n              i = 0;\n\n            case 6:\n              if (!(i < userDetails[4])) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(projhub.methods.getProjectDetails(userDetails[1], i).call());\n\n            case 9:\n              proj = _context.sent;\n              projects.push(proj);\n\n            case 11:\n              i++;\n              _context.next = 6;\n              break;\n\n            case 14:\n              this.setState({\n                userIndex: userIndex,\n                userAddress: userDetails[1],\n                userName: userDetails[2],\n                userEmail: userDetails[3],\n                userProjCount: userDetails[4],\n                projects: projects\n              });\n              console.log(projects);\n              this.renderProjcards();\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, __jsx(Grid.Column, {\n        width: \"5\",\n        style: {\n          marginTop: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        style: {\n          marginBottom: \"0px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, this.state.userName), __jsx(\"p\", {\n        style: {\n          color: \"grey\",\n          marginTop: \"0px\",\n          fontSize: \"14px\",\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.state.userAddress), __jsx(\"p\", {\n        style: {\n          fontSize: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Email: \", this.state.userEmail), __jsx(Button, {\n        color: \"teal\",\n        content: \"Follow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }))), __jsx(Grid.Column, {\n        width: \"10\",\n        style: {\n          borderLeft: \"1px solid\",\n          borderColor: \"grey\",\n          marginTop: \"20px\",\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, __jsx(Card.Group, {\n        items: this.state.projCards,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", {\n                userIndex: props.query.index\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return DisplayUser;\n}(Component);\n\nexport default DisplayUser;","map":{"version":3,"sources":["/home/hrishib/Desktop/gitchain/pages/users/display/index.js"],"names":["React","Component","Layout","projhub","web3","ipfs","Grid","Container","Card","Button","DisplayUser","userIndex","userName","userAddress","userEmail","userProjCount","projects","projCards","state","map","proj","index","header","description","whiteSpace","overflow","textOverflow","extra","setState","props","methods","users","call","userDetails","i","getProjectDetails","push","console","log","renderProjcards","marginTop","marginBottom","color","fontSize","borderLeft","borderColor","padding","query"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../../components/Layout\";\nimport projhub from \"../../../ethereum/projhub\";\nimport web3 from \"../../../ethereum/web3\";\nimport ipfs from \"../../../ethereum/ipfs\";\nimport { Grid, Container, Card, Button } from \"semantic-ui-react\";\n\nclass DisplayUser extends Component {\n  state = {\n    userIndex: 0,\n    userName: \"\",\n    userAddress: \"\",\n    userEmail: \"\",\n    userProjCount: 0,\n    projects: [],\n    projCards: []\n  };\n\n  static async getInitialProps(props) {\n    return {\n      userIndex: props.query.index\n    };\n  }\n\n  async componentDidMount() {\n    const userIndex = this.props.userIndex;\n    const userDetails = await projhub.methods.users(userIndex).call();\n\n    let projects = [];\n    for (let i = 0; i < userDetails[4]; i++) {\n      const proj = await projhub.methods.getProjectDetails(userDetails[1], i).call();\n      projects.push(proj);\n    }\n\n    this.setState({\n      userIndex: userIndex,\n      userAddress: userDetails[1],\n      userName: userDetails[2],\n      userEmail: userDetails[3],\n      userProjCount: userDetails[4],\n      projects: projects\n    });\n    console.log(projects);\n    this.renderProjcards();\n  }\n\n  renderProjcards = () => {\n    const projCards = this.state.projects.map((proj, index) => {\n      return {\n        header: (<h3>{proj[1]}</h3>),\n        description: (<p style={{whiteSpace:\"nowrap\", overflow:\"hidden\", textOverflow:\"ellipsis\"}}>{proj[3]}</p>),\n        extra: (<p>{proj[2]}</p>)\n      };\n    });\n    this.setState({ projCards: projCards });\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Container>\n          <Grid>\n            <Grid.Column width=\"5\" style={{ marginTop:\"20px\" }}>\n              <div >\n                <h2 style={{ marginBottom:\"0px\"}}>{this.state.userName}</h2>\n                <p style={{color:\"grey\", marginTop:\"0px\", fontSize:\"14px\", overflow:\"hidden\", textOverflow:\"ellipsis\"}}>{this.state.userAddress}</p>\n                <p style={{fontSize:\"15px\"}}>Email: {this.state.userEmail}</p>\n                <Button color=\"teal\" content=\"Follow\"/>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"10\" style={{borderLeft:\"1px solid\", borderColor:\"grey\", marginTop:\"20px\", padding:\"10px\"}}>\n              <Card.Group items={this.state.projCards}/>\n            </Grid.Column>\n          </Grid>\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nexport default DisplayUser;\n"]},"metadata":{},"sourceType":"module"}